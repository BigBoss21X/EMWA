/*
 Noise Monitor
 Sketch for an Arduino gadget that detects noise.
 This example code is in the public domain.
 */

int sensorPin = A0; // select the input pin for the input device

const int numberOfLEDs = 10;

const int numberOfSamples = 16;
int sample;
long signal[numberOfSamples];
long runningAverage;
long sumOfSamples = 0;
int counter =0;

int threshold[] = {
  0, 47, 99, 159, 227, 308, 407, 535, 715, 800, 900};


// You can play with the sensitivity of the LEDs by removing the above threshold and using 
// the one below.  Try different values.  Experiment!
//int threshold[]={
//  0,25,50,75,100,125,150,175,200,225};


void setup()
{
  // declare the ledPins as an OUTPUT. We're doing it line-by-line, so you can see what's happening.
  pinMode(2, OUTPUT);
  pinMode(3, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(5, OUTPUT);
  pinMode(6, OUTPUT);
  pinMode(7, OUTPUT);
  pinMode(8, OUTPUT);
  pinMode(9, OUTPUT);
  pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);

  // setting each pin to LOW so as not to light the LED
  digitalWrite(2, LOW);
  digitalWrite(3, LOW);
  digitalWrite(4, LOW);
  digitalWrite(5, LOW);
  digitalWrite(6, LOW);
  digitalWrite(7, LOW);
  digitalWrite(8, LOW);
  digitalWrite(9, LOW);
  digitalWrite(10, LOW);
  digitalWrite(11, LOW);

  // set the analog 0 pin to input 
  pinMode(sensorPin, INPUT);


  // Getting a baseline noise signal
  for(int i =0; i <=numberOfSamples; i++)
  {
    sample = analogRead(sensorPin);

    signal[i] = abs(sample -512);
    sumOfSamples = sumOfSamples + signal[i];
  }


  // Tests the LEDs by turning them on.  This time, we're using a for() loop to do the job.
  // Using for(), while() and other loops is probably how you should handle tasks like this.

  for(int i=0; i <=numberOfLEDs; i++)
  {
    digitalWrite(i+1, HIGH);
    delay(100);
  }

  // ... and then turning them off.
  for(int i=0; i <=numberOfLEDs; i++)
  {
    digitalWrite(i+1, LOW);
    delay(100);
  }


  Serial.begin(9600);


}


void loop()
{
  // We want to take a "running average" of the output of the
  // microphone.  We started getting a baseline average back 
  // in setup().  Now, we're subtracting the oldest sound 
  // sample from the running total, taking a new sound sample, 
  // adding that to the running total, and taking the average.
  // This gives us a "typical" sound sample.



  // Increase our counter, to keep track of how many audio samples
  // we are taking.  If we use more than the number of samples,
  // use the % (modulo) operator to set the counter to zero.

  counter = ++counter % numberOfSamples;

  // subtract the oldest sample from our total audio sample
  sumOfSamples -= signal[counter];

  // take a new audio sample
  sample = analogRead(sensorPin);

  // assign the sample to an array, normalize and adjust it to remove 
  // negative values  
  signal[counter] = abs(sample -512);

  // Add the most recent sample to the total audio sample
  sumOfSamples = sumOfSamples + signal[counter];

  // And (this is the key part), take an average of all the samples 
  runningAverage = sumOfSamples/numberOfSamples;

  Serial.print("Running Value = ");
  Serial.println(runningAverage);
  Serial.println(" ");

  // light up the LEDs
  for (int i =0; i <=numberOfLEDs; i++)
  {

    // Then see if the average sound meets that LED's threshold value
    if(runningAverage>threshold[i])
    {
      // if so, light the LED
      digitalWrite(i+1, HIGH);
      delay(10);
    }

  }

  // turn all LEDs off from right to left.  This keeps the display
  // "active", like the dislay on an audio amplifier
  for (int i =numberOfLEDs; i >=1; i--)
  {
    digitalWrite(i+1, LOW);
  }


}


