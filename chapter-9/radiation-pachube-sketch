/* ==============================
 * This code, which assumes you're using the official Arduino Ethernet shield,
 * updates a Pachube feed with your analog-in values and grabs values from a Pachube
 * feed - basically it enables you to have both "local" and "remote" sensors.
 *
 * Tested with Arduino 1.0
 *
 * Pachube is www.pachube.com - connect, tag and share real time sensor data
 * code by usman (www.haque.co.uk), may 2009
 * copy, distribute, whatever, as you like.
 *
 * v1.1 - added User-Agent & fixed HTTP parser for new Pachube headers
 * and check millis() for when it wraps around
 *
 * 
 * Ethernet shield attached to pins 10, 11, 12, 13
 *
 * created 15 March 2010
 * updated 4 Sep 2010
 * by Tom Igoe
 *
 * http://www.tigoe.net/pcomp/code/category/arduinowiring/873
 * This code is in the public domain.
 *
 * Modified autumn 2011 by Patrick Di Justo
 */

#include <SPI.h>
#include <Ethernet.h>

// assign a MAC address for the ethernet controller.
// Newer Ethernet shields have a MAC address printed on a sticker on the shield
// fill in your address here:

byte mac[] = {  0xDE, 0xAD, 0xBE, 0xEF, 0xCA, 0xFE};


// initialize the library instance:
EthernetClient client;

long lastConnectionTime = 0;        // last time you connected to the server, in milliseconds
boolean lastConnected = false;      // state of the connection last time through the main loop
const int postingInterval = 15000;  //delay between updates to Pachube.com

int minuteFactor = 60000 / postingInterval;

int geiger_input = 2;
long timePreviousMeassure = 0;
long countPerMinute = 0;
long count = 0;
float radiationValue = 0.0;

// Define the SPI pin for the SD Card
#define SD_CARD 4


//This is the conversion factor for the SBM-20 rediation detection tube
#define CONV_FACTOR 0.0057

// replace th X is with YOUR Pachube feed ID:
#define SHARE_FEED_ID XXXXX

// replace the Xs with your Pachube API key:
#define PACHUBE_API_KEY            "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" // fill in your API key 

void setup() 
{
  
  // IF using the Wiznet SD card/Ethernet shield, these two lines
  // are absolutely necessary to temporarily disable the SD card
  // so that the Ethernet port will work.

  pinMode(SD_CARD, OUTPUT);
  digitalWrite(SD_CARD, HIGH);
  
  
  // start serial port:
  Serial.begin(9600);
  // start the Ethernet connection:
    delay(1000);
  
  
  if (Ethernet.begin(mac) == 0) 
  {
    Serial.println("Failed to configure Ethernet using DHCP");
    // no point in carrying on, so do nothing forevermore:
    for(;;)
      ;
  }
   
  // give the ethernet module time to boot up:
  delay(1000);
  
  // Set the geiger counter input to HIGH so we can tell when it 
  // changes.  We are going to use Arduino interrupt 0, connected
  // to digital pin 2, which we are using for geiger_input.
  
  pinMode(geiger_input, INPUT);
  digitalWrite(geiger_input,HIGH);

  attachInterrupt(0,countPulse,CHANGE);
    
}

void loop() 

{
   
 if (millis()-timePreviousMeassure > postingInterval)

{
 
        countPerMinute = count*minuteFactor;
        radiationValue = countPerMinute * CONV_FACTOR;
        timePreviousMeassure = millis();
        Serial.println(count);
        Serial.print("cpm = ");
        Serial.print(countPerMinute,DEC);
        Serial.print(" - ");
        Serial.print("uSv/h = ");
        Serial.println(radiationValue,4);
        count = 0;

}

  // if there's incoming data from the net connection.
  // send it out the serial port.  This is for debugging
  // purposes only:
  if (client.available()) {
    char c = client.read();
    Serial.print(c);
}

  // if there's no net connection, but there was one last time
  // through the loop, then stop the client:
  if (!client.connected() && lastConnected) {
    Serial.println();
    Serial.println("disconnecting.");
    client.stop();
}

  // if you're not connected, and ten seconds have passed since
  // your last connection, then connect again and send data:
  if(!client.connected() && (millis() - lastConnectionTime > postingInterval)) {
    sendData(radiationValue);
}

  // store the state of the connection for next time through
  // the loop:
  lastConnected = client.connected();
}

void countPulse()

{
  detachInterrupt(0);
  count++;
  digitalWrite(13,HIGH);
  while(digitalRead(2)==0){}
  digitalWrite(13,LOW);
  
  attachInterrupt(0,countPulse,CHANGE);
}

// this method makes a HTTP connection to the server:
void sendData(int thisData) {
  // if there's a successful connection:
  if (client.connect("www.pachube.com", 80)) {
    Serial.println("connecting...");
    // send the HTTP PUT request. 
    // fill in your feed address here:
    client.print("PUT /api/");
    client.print(SHARE_FEED_ID);
    client.print(".csv HTTP/1.1\nHost: pachube.com\nX-PachubeApiKey: ");
    client.print(PACHUBE_API_KEY);
    client.print("\nContent-Length: ");

    // calculate the length of the sensor reading in bytes:
    int thisLength = getLength(thisData);
    client.println(thisLength, DEC);

    // last pieces of the HTTP PUT request:
    client.print("Content-Type: text/csv\n");
    client.println("Connection: close\n");

    // here's the actual content of the PUT request:
    client.println(thisData, DEC);

    // note the time that the connection was made:
    lastConnectionTime = millis();
} 

  else 

{
    // if you couldn't make a connection:
    Serial.println("connection failed");
}

}

// This method calculates the number of digits in the
// sensor reading.  Since each digit of the ASCII decimal
// representation is a byte, the number of digits equals
// the number of bytes:

int getLength(int someValue) 

{

// there's at least one byte:
  int digits = 1;
  // continually divide the value by ten, 
  // adding one to the digit count for each
  // time you divide, until you're at 0:
  int dividend = someValue /10;
  while (dividend > 0) {
    dividend = dividend /10;
    digits++;
}

  // return the number of digits:
  return digits;
}
